// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: proto/audit/v1/audit.proto

package auditv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuditService_SubmitContent_FullMethodName        = "/audit.v1.AuditService/SubmitContent"
	AuditService_GetAuditResult_FullMethodName       = "/audit.v1.AuditService/GetAuditResult"
	AuditService_UpdateAuditStatus_FullMethodName    = "/audit.v1.AuditService/UpdateAuditStatus"
	AuditService_ListAuditRecords_FullMethodName     = "/audit.v1.AuditService/ListAuditRecords"
	AuditService_AddToWhitelist_FullMethodName       = "/audit.v1.AuditService/AddToWhitelist"
	AuditService_RemoveFromWhitelist_FullMethodName  = "/audit.v1.AuditService/RemoveFromWhitelist"
	AuditService_AddToBlacklist_FullMethodName       = "/audit.v1.AuditService/AddToBlacklist"
	AuditService_RemoveFromBlacklist_FullMethodName  = "/audit.v1.AuditService/RemoveFromBlacklist"
	AuditService_GetManualReviewQueue_FullMethodName = "/audit.v1.AuditService/GetManualReviewQueue"
	AuditService_AssignManualReview_FullMethodName   = "/audit.v1.AuditService/AssignManualReview"
	AuditService_GetAuditStatistics_FullMethodName   = "/audit.v1.AuditService/GetAuditStatistics"
	AuditService_GetViolationTrends_FullMethodName   = "/audit.v1.AuditService/GetViolationTrends"
)

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditServiceClient interface {
	// 提交内容审核
	SubmitContent(ctx context.Context, in *SubmitContentRequest, opts ...grpc.CallOption) (*SubmitContentResponse, error)
	// 获取审核结果
	GetAuditResult(ctx context.Context, in *GetAuditResultRequest, opts ...grpc.CallOption) (*GetAuditResultResponse, error)
	// 更新审核状态
	UpdateAuditStatus(ctx context.Context, in *UpdateAuditStatusRequest, opts ...grpc.CallOption) (*UpdateAuditStatusResponse, error)
	// 获取审核记录列表
	ListAuditRecords(ctx context.Context, in *ListAuditRecordsRequest, opts ...grpc.CallOption) (*ListAuditRecordsResponse, error)
	// 添加到白名单
	AddToWhitelist(ctx context.Context, in *AddToWhitelistRequest, opts ...grpc.CallOption) (*AddToWhitelistResponse, error)
	// 从白名单移除
	RemoveFromWhitelist(ctx context.Context, in *RemoveFromWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistResponse, error)
	// 添加到黑名单
	AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistResponse, error)
	// 从黑名单移除
	RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistResponse, error)
	// 获取人工审核队列
	GetManualReviewQueue(ctx context.Context, in *GetManualReviewQueueRequest, opts ...grpc.CallOption) (*GetManualReviewQueueResponse, error)
	// 分配人工审核
	AssignManualReview(ctx context.Context, in *AssignManualReviewRequest, opts ...grpc.CallOption) (*AssignManualReviewResponse, error)
	// 获取审核统计
	GetAuditStatistics(ctx context.Context, in *GetAuditStatisticsRequest, opts ...grpc.CallOption) (*GetAuditStatisticsResponse, error)
	// 获取违规趋势
	GetViolationTrends(ctx context.Context, in *GetViolationTrendsRequest, opts ...grpc.CallOption) (*GetViolationTrendsResponse, error)
}

type auditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceClient(cc grpc.ClientConnInterface) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) SubmitContent(ctx context.Context, in *SubmitContentRequest, opts ...grpc.CallOption) (*SubmitContentResponse, error) {
	out := new(SubmitContentResponse)
	err := c.cc.Invoke(ctx, AuditService_SubmitContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditResult(ctx context.Context, in *GetAuditResultRequest, opts ...grpc.CallOption) (*GetAuditResultResponse, error) {
	out := new(GetAuditResultResponse)
	err := c.cc.Invoke(ctx, AuditService_GetAuditResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) UpdateAuditStatus(ctx context.Context, in *UpdateAuditStatusRequest, opts ...grpc.CallOption) (*UpdateAuditStatusResponse, error) {
	out := new(UpdateAuditStatusResponse)
	err := c.cc.Invoke(ctx, AuditService_UpdateAuditStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) ListAuditRecords(ctx context.Context, in *ListAuditRecordsRequest, opts ...grpc.CallOption) (*ListAuditRecordsResponse, error) {
	out := new(ListAuditRecordsResponse)
	err := c.cc.Invoke(ctx, AuditService_ListAuditRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) AddToWhitelist(ctx context.Context, in *AddToWhitelistRequest, opts ...grpc.CallOption) (*AddToWhitelistResponse, error) {
	out := new(AddToWhitelistResponse)
	err := c.cc.Invoke(ctx, AuditService_AddToWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) RemoveFromWhitelist(ctx context.Context, in *RemoveFromWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistResponse, error) {
	out := new(RemoveFromWhitelistResponse)
	err := c.cc.Invoke(ctx, AuditService_RemoveFromWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistResponse, error) {
	out := new(AddToBlacklistResponse)
	err := c.cc.Invoke(ctx, AuditService_AddToBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistResponse, error) {
	out := new(RemoveFromBlacklistResponse)
	err := c.cc.Invoke(ctx, AuditService_RemoveFromBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetManualReviewQueue(ctx context.Context, in *GetManualReviewQueueRequest, opts ...grpc.CallOption) (*GetManualReviewQueueResponse, error) {
	out := new(GetManualReviewQueueResponse)
	err := c.cc.Invoke(ctx, AuditService_GetManualReviewQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) AssignManualReview(ctx context.Context, in *AssignManualReviewRequest, opts ...grpc.CallOption) (*AssignManualReviewResponse, error) {
	out := new(AssignManualReviewResponse)
	err := c.cc.Invoke(ctx, AuditService_AssignManualReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetAuditStatistics(ctx context.Context, in *GetAuditStatisticsRequest, opts ...grpc.CallOption) (*GetAuditStatisticsResponse, error) {
	out := new(GetAuditStatisticsResponse)
	err := c.cc.Invoke(ctx, AuditService_GetAuditStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) GetViolationTrends(ctx context.Context, in *GetViolationTrendsRequest, opts ...grpc.CallOption) (*GetViolationTrendsResponse, error) {
	out := new(GetViolationTrendsResponse)
	err := c.cc.Invoke(ctx, AuditService_GetViolationTrends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
// All implementations must embed UnimplementedAuditServiceServer
// for forward compatibility
type AuditServiceServer interface {
	// 提交内容审核
	SubmitContent(context.Context, *SubmitContentRequest) (*SubmitContentResponse, error)
	// 获取审核结果
	GetAuditResult(context.Context, *GetAuditResultRequest) (*GetAuditResultResponse, error)
	// 更新审核状态
	UpdateAuditStatus(context.Context, *UpdateAuditStatusRequest) (*UpdateAuditStatusResponse, error)
	// 获取审核记录列表
	ListAuditRecords(context.Context, *ListAuditRecordsRequest) (*ListAuditRecordsResponse, error)
	// 添加到白名单
	AddToWhitelist(context.Context, *AddToWhitelistRequest) (*AddToWhitelistResponse, error)
	// 从白名单移除
	RemoveFromWhitelist(context.Context, *RemoveFromWhitelistRequest) (*RemoveFromWhitelistResponse, error)
	// 添加到黑名单
	AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistResponse, error)
	// 从黑名单移除
	RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistResponse, error)
	// 获取人工审核队列
	GetManualReviewQueue(context.Context, *GetManualReviewQueueRequest) (*GetManualReviewQueueResponse, error)
	// 分配人工审核
	AssignManualReview(context.Context, *AssignManualReviewRequest) (*AssignManualReviewResponse, error)
	// 获取审核统计
	GetAuditStatistics(context.Context, *GetAuditStatisticsRequest) (*GetAuditStatisticsResponse, error)
	// 获取违规趋势
	GetViolationTrends(context.Context, *GetViolationTrendsRequest) (*GetViolationTrendsResponse, error)
	mustEmbedUnimplementedAuditServiceServer()
}

// UnimplementedAuditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuditServiceServer struct {
}

func (UnimplementedAuditServiceServer) SubmitContent(context.Context, *SubmitContentRequest) (*SubmitContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitContent not implemented")
}
func (UnimplementedAuditServiceServer) GetAuditResult(context.Context, *GetAuditResultRequest) (*GetAuditResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditResult not implemented")
}
func (UnimplementedAuditServiceServer) UpdateAuditStatus(context.Context, *UpdateAuditStatusRequest) (*UpdateAuditStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuditStatus not implemented")
}
func (UnimplementedAuditServiceServer) ListAuditRecords(context.Context, *ListAuditRecordsRequest) (*ListAuditRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditRecords not implemented")
}
func (UnimplementedAuditServiceServer) AddToWhitelist(context.Context, *AddToWhitelistRequest) (*AddToWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedAuditServiceServer) RemoveFromWhitelist(context.Context, *RemoveFromWhitelistRequest) (*RemoveFromWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedAuditServiceServer) AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedAuditServiceServer) RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedAuditServiceServer) GetManualReviewQueue(context.Context, *GetManualReviewQueueRequest) (*GetManualReviewQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManualReviewQueue not implemented")
}
func (UnimplementedAuditServiceServer) AssignManualReview(context.Context, *AssignManualReviewRequest) (*AssignManualReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignManualReview not implemented")
}
func (UnimplementedAuditServiceServer) GetAuditStatistics(context.Context, *GetAuditStatisticsRequest) (*GetAuditStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditStatistics not implemented")
}
func (UnimplementedAuditServiceServer) GetViolationTrends(context.Context, *GetViolationTrendsRequest) (*GetViolationTrendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViolationTrends not implemented")
}
func (UnimplementedAuditServiceServer) mustEmbedUnimplementedAuditServiceServer() {}

// UnsafeAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServiceServer will
// result in compilation errors.
type UnsafeAuditServiceServer interface {
	mustEmbedUnimplementedAuditServiceServer()
}

func RegisterAuditServiceServer(s grpc.ServiceRegistrar, srv AuditServiceServer) {
	s.RegisterService(&AuditService_ServiceDesc, srv)
}

func _AuditService_SubmitContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).SubmitContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_SubmitContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).SubmitContent(ctx, req.(*SubmitContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetAuditResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditResult(ctx, req.(*GetAuditResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_UpdateAuditStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuditStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).UpdateAuditStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_UpdateAuditStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).UpdateAuditStatus(ctx, req.(*UpdateAuditStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_ListAuditRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListAuditRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_ListAuditRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListAuditRecords(ctx, req.(*ListAuditRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).AddToWhitelist(ctx, req.(*AddToWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_RemoveFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).RemoveFromWhitelist(ctx, req.(*RemoveFromWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).AddToBlacklist(ctx, req.(*AddToBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_RemoveFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).RemoveFromBlacklist(ctx, req.(*RemoveFromBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetManualReviewQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManualReviewQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetManualReviewQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetManualReviewQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetManualReviewQueue(ctx, req.(*GetManualReviewQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_AssignManualReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignManualReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).AssignManualReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_AssignManualReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).AssignManualReview(ctx, req.(*AssignManualReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetAuditStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetAuditStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetAuditStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetAuditStatistics(ctx, req.(*GetAuditStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_GetViolationTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViolationTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetViolationTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_GetViolationTrends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetViolationTrends(ctx, req.(*GetViolationTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditService_ServiceDesc is the grpc.ServiceDesc for AuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audit.v1.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitContent",
			Handler:    _AuditService_SubmitContent_Handler,
		},
		{
			MethodName: "GetAuditResult",
			Handler:    _AuditService_GetAuditResult_Handler,
		},
		{
			MethodName: "UpdateAuditStatus",
			Handler:    _AuditService_UpdateAuditStatus_Handler,
		},
		{
			MethodName: "ListAuditRecords",
			Handler:    _AuditService_ListAuditRecords_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _AuditService_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _AuditService_RemoveFromWhitelist_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _AuditService_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _AuditService_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "GetManualReviewQueue",
			Handler:    _AuditService_GetManualReviewQueue_Handler,
		},
		{
			MethodName: "AssignManualReview",
			Handler:    _AuditService_AssignManualReview_Handler,
		},
		{
			MethodName: "GetAuditStatistics",
			Handler:    _AuditService_GetAuditStatistics_Handler,
		},
		{
			MethodName: "GetViolationTrends",
			Handler:    _AuditService_GetViolationTrends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/audit/v1/audit.proto",
}
