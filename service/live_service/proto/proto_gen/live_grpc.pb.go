// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: proto/live.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveService_StartLive_FullMethodName         = "/livepb.LiveService/StartLive"
	LiveService_StopLive_FullMethodName          = "/livepb.LiveService/StopLive"
	LiveService_GetLiveStream_FullMethodName     = "/livepb.LiveService/GetLiveStream"
	LiveService_GetLiveList_FullMethodName       = "/livepb.LiveService/GetLiveList"
	LiveService_GetHotLiveList_FullMethodName    = "/livepb.LiveService/GetHotLiveList"
	LiveService_JoinLiveRoom_FullMethodName      = "/livepb.LiveService/JoinLiveRoom"
	LiveService_LeaveLiveRoom_FullMethodName     = "/livepb.LiveService/LeaveLiveRoom"
	LiveService_GetLiveViewerList_FullMethodName = "/livepb.LiveService/GetLiveViewerList"
	LiveService_SendLiveChat_FullMethodName      = "/livepb.LiveService/SendLiveChat"
	LiveService_GetLiveChatList_FullMethodName   = "/livepb.LiveService/GetLiveChatList"
	LiveService_SendLiveGift_FullMethodName      = "/livepb.LiveService/SendLiveGift"
	LiveService_GetLiveGiftList_FullMethodName   = "/livepb.LiveService/GetLiveGiftList"
	LiveService_LikeLive_FullMethodName          = "/livepb.LiveService/LikeLive"
	LiveService_SearchLive_FullMethodName        = "/livepb.LiveService/SearchLive"
	LiveService_GetLiveCategories_FullMethodName = "/livepb.LiveService/GetLiveCategories"
	LiveService_GetLiveStats_FullMethodName      = "/livepb.LiveService/GetLiveStats"
	LiveService_GetLivePlayback_FullMethodName   = "/livepb.LiveService/GetLivePlayback"
)

// LiveServiceClient is the client API for LiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveServiceClient interface {
	// 直播流管理
	StartLive(ctx context.Context, in *StartLiveRequest, opts ...grpc.CallOption) (*StartLiveResponse, error)
	StopLive(ctx context.Context, in *StopLiveRequest, opts ...grpc.CallOption) (*StopLiveResponse, error)
	GetLiveStream(ctx context.Context, in *GetLiveStreamRequest, opts ...grpc.CallOption) (*GetLiveStreamResponse, error)
	GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error)
	GetHotLiveList(ctx context.Context, in *GetHotLiveListRequest, opts ...grpc.CallOption) (*GetHotLiveListResponse, error)
	// 直播间管理
	JoinLiveRoom(ctx context.Context, in *JoinLiveRoomRequest, opts ...grpc.CallOption) (*JoinLiveRoomResponse, error)
	LeaveLiveRoom(ctx context.Context, in *LeaveLiveRoomRequest, opts ...grpc.CallOption) (*LeaveLiveRoomResponse, error)
	GetLiveViewerList(ctx context.Context, in *GetLiveViewerListRequest, opts ...grpc.CallOption) (*GetLiveViewerListResponse, error)
	// 聊天消息
	SendLiveChat(ctx context.Context, in *SendLiveChatRequest, opts ...grpc.CallOption) (*SendLiveChatResponse, error)
	GetLiveChatList(ctx context.Context, in *GetLiveChatListRequest, opts ...grpc.CallOption) (*GetLiveChatListResponse, error)
	// 礼物系统
	SendLiveGift(ctx context.Context, in *SendLiveGiftRequest, opts ...grpc.CallOption) (*SendLiveGiftResponse, error)
	GetLiveGiftList(ctx context.Context, in *GetLiveGiftListRequest, opts ...grpc.CallOption) (*GetLiveGiftListResponse, error)
	// 互动功能
	LikeLive(ctx context.Context, in *LikeLiveRequest, opts ...grpc.CallOption) (*LikeLiveResponse, error)
	// 搜索和推荐
	SearchLive(ctx context.Context, in *SearchLiveRequest, opts ...grpc.CallOption) (*SearchLiveResponse, error)
	GetLiveCategories(ctx context.Context, in *GetLiveCategoriesRequest, opts ...grpc.CallOption) (*GetLiveCategoriesResponse, error)
	// 统计和分析
	GetLiveStats(ctx context.Context, in *GetLiveStatsRequest, opts ...grpc.CallOption) (*GetLiveStatsResponse, error)
	GetLivePlayback(ctx context.Context, in *GetLivePlaybackRequest, opts ...grpc.CallOption) (*GetLivePlaybackResponse, error)
}

type liveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveServiceClient(cc grpc.ClientConnInterface) LiveServiceClient {
	return &liveServiceClient{cc}
}

func (c *liveServiceClient) StartLive(ctx context.Context, in *StartLiveRequest, opts ...grpc.CallOption) (*StartLiveResponse, error) {
	out := new(StartLiveResponse)
	err := c.cc.Invoke(ctx, LiveService_StartLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) StopLive(ctx context.Context, in *StopLiveRequest, opts ...grpc.CallOption) (*StopLiveResponse, error) {
	out := new(StopLiveResponse)
	err := c.cc.Invoke(ctx, LiveService_StopLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveStream(ctx context.Context, in *GetLiveStreamRequest, opts ...grpc.CallOption) (*GetLiveStreamResponse, error) {
	out := new(GetLiveStreamResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error) {
	out := new(GetLiveListResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetHotLiveList(ctx context.Context, in *GetHotLiveListRequest, opts ...grpc.CallOption) (*GetHotLiveListResponse, error) {
	out := new(GetHotLiveListResponse)
	err := c.cc.Invoke(ctx, LiveService_GetHotLiveList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) JoinLiveRoom(ctx context.Context, in *JoinLiveRoomRequest, opts ...grpc.CallOption) (*JoinLiveRoomResponse, error) {
	out := new(JoinLiveRoomResponse)
	err := c.cc.Invoke(ctx, LiveService_JoinLiveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) LeaveLiveRoom(ctx context.Context, in *LeaveLiveRoomRequest, opts ...grpc.CallOption) (*LeaveLiveRoomResponse, error) {
	out := new(LeaveLiveRoomResponse)
	err := c.cc.Invoke(ctx, LiveService_LeaveLiveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveViewerList(ctx context.Context, in *GetLiveViewerListRequest, opts ...grpc.CallOption) (*GetLiveViewerListResponse, error) {
	out := new(GetLiveViewerListResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveViewerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) SendLiveChat(ctx context.Context, in *SendLiveChatRequest, opts ...grpc.CallOption) (*SendLiveChatResponse, error) {
	out := new(SendLiveChatResponse)
	err := c.cc.Invoke(ctx, LiveService_SendLiveChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveChatList(ctx context.Context, in *GetLiveChatListRequest, opts ...grpc.CallOption) (*GetLiveChatListResponse, error) {
	out := new(GetLiveChatListResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveChatList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) SendLiveGift(ctx context.Context, in *SendLiveGiftRequest, opts ...grpc.CallOption) (*SendLiveGiftResponse, error) {
	out := new(SendLiveGiftResponse)
	err := c.cc.Invoke(ctx, LiveService_SendLiveGift_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveGiftList(ctx context.Context, in *GetLiveGiftListRequest, opts ...grpc.CallOption) (*GetLiveGiftListResponse, error) {
	out := new(GetLiveGiftListResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveGiftList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) LikeLive(ctx context.Context, in *LikeLiveRequest, opts ...grpc.CallOption) (*LikeLiveResponse, error) {
	out := new(LikeLiveResponse)
	err := c.cc.Invoke(ctx, LiveService_LikeLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) SearchLive(ctx context.Context, in *SearchLiveRequest, opts ...grpc.CallOption) (*SearchLiveResponse, error) {
	out := new(SearchLiveResponse)
	err := c.cc.Invoke(ctx, LiveService_SearchLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveCategories(ctx context.Context, in *GetLiveCategoriesRequest, opts ...grpc.CallOption) (*GetLiveCategoriesResponse, error) {
	out := new(GetLiveCategoriesResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLiveStats(ctx context.Context, in *GetLiveStatsRequest, opts ...grpc.CallOption) (*GetLiveStatsResponse, error) {
	out := new(GetLiveStatsResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLiveStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) GetLivePlayback(ctx context.Context, in *GetLivePlaybackRequest, opts ...grpc.CallOption) (*GetLivePlaybackResponse, error) {
	out := new(GetLivePlaybackResponse)
	err := c.cc.Invoke(ctx, LiveService_GetLivePlayback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServiceServer is the server API for LiveService service.
// All implementations must embed UnimplementedLiveServiceServer
// for forward compatibility
type LiveServiceServer interface {
	// 直播流管理
	StartLive(context.Context, *StartLiveRequest) (*StartLiveResponse, error)
	StopLive(context.Context, *StopLiveRequest) (*StopLiveResponse, error)
	GetLiveStream(context.Context, *GetLiveStreamRequest) (*GetLiveStreamResponse, error)
	GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error)
	GetHotLiveList(context.Context, *GetHotLiveListRequest) (*GetHotLiveListResponse, error)
	// 直播间管理
	JoinLiveRoom(context.Context, *JoinLiveRoomRequest) (*JoinLiveRoomResponse, error)
	LeaveLiveRoom(context.Context, *LeaveLiveRoomRequest) (*LeaveLiveRoomResponse, error)
	GetLiveViewerList(context.Context, *GetLiveViewerListRequest) (*GetLiveViewerListResponse, error)
	// 聊天消息
	SendLiveChat(context.Context, *SendLiveChatRequest) (*SendLiveChatResponse, error)
	GetLiveChatList(context.Context, *GetLiveChatListRequest) (*GetLiveChatListResponse, error)
	// 礼物系统
	SendLiveGift(context.Context, *SendLiveGiftRequest) (*SendLiveGiftResponse, error)
	GetLiveGiftList(context.Context, *GetLiveGiftListRequest) (*GetLiveGiftListResponse, error)
	// 互动功能
	LikeLive(context.Context, *LikeLiveRequest) (*LikeLiveResponse, error)
	// 搜索和推荐
	SearchLive(context.Context, *SearchLiveRequest) (*SearchLiveResponse, error)
	GetLiveCategories(context.Context, *GetLiveCategoriesRequest) (*GetLiveCategoriesResponse, error)
	// 统计和分析
	GetLiveStats(context.Context, *GetLiveStatsRequest) (*GetLiveStatsResponse, error)
	GetLivePlayback(context.Context, *GetLivePlaybackRequest) (*GetLivePlaybackResponse, error)
	mustEmbedUnimplementedLiveServiceServer()
}

// UnimplementedLiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveServiceServer struct {
}

func (UnimplementedLiveServiceServer) StartLive(context.Context, *StartLiveRequest) (*StartLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLive not implemented")
}
func (UnimplementedLiveServiceServer) StopLive(context.Context, *StopLiveRequest) (*StopLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLive not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveStream(context.Context, *GetLiveStreamRequest) (*GetLiveStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveStream not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveList not implemented")
}
func (UnimplementedLiveServiceServer) GetHotLiveList(context.Context, *GetHotLiveListRequest) (*GetHotLiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotLiveList not implemented")
}
func (UnimplementedLiveServiceServer) JoinLiveRoom(context.Context, *JoinLiveRoomRequest) (*JoinLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLiveRoom not implemented")
}
func (UnimplementedLiveServiceServer) LeaveLiveRoom(context.Context, *LeaveLiveRoomRequest) (*LeaveLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLiveRoom not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveViewerList(context.Context, *GetLiveViewerListRequest) (*GetLiveViewerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveViewerList not implemented")
}
func (UnimplementedLiveServiceServer) SendLiveChat(context.Context, *SendLiveChatRequest) (*SendLiveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLiveChat not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveChatList(context.Context, *GetLiveChatListRequest) (*GetLiveChatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveChatList not implemented")
}
func (UnimplementedLiveServiceServer) SendLiveGift(context.Context, *SendLiveGiftRequest) (*SendLiveGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLiveGift not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveGiftList(context.Context, *GetLiveGiftListRequest) (*GetLiveGiftListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveGiftList not implemented")
}
func (UnimplementedLiveServiceServer) LikeLive(context.Context, *LikeLiveRequest) (*LikeLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeLive not implemented")
}
func (UnimplementedLiveServiceServer) SearchLive(context.Context, *SearchLiveRequest) (*SearchLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLive not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveCategories(context.Context, *GetLiveCategoriesRequest) (*GetLiveCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveCategories not implemented")
}
func (UnimplementedLiveServiceServer) GetLiveStats(context.Context, *GetLiveStatsRequest) (*GetLiveStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveStats not implemented")
}
func (UnimplementedLiveServiceServer) GetLivePlayback(context.Context, *GetLivePlaybackRequest) (*GetLivePlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLivePlayback not implemented")
}
func (UnimplementedLiveServiceServer) mustEmbedUnimplementedLiveServiceServer() {}

// UnsafeLiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServiceServer will
// result in compilation errors.
type UnsafeLiveServiceServer interface {
	mustEmbedUnimplementedLiveServiceServer()
}

func RegisterLiveServiceServer(s grpc.ServiceRegistrar, srv LiveServiceServer) {
	s.RegisterService(&LiveService_ServiceDesc, srv)
}

func _LiveService_StartLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).StartLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_StartLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).StartLive(ctx, req.(*StartLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_StopLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).StopLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_StopLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).StopLive(ctx, req.(*StopLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveStream(ctx, req.(*GetLiveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveList(ctx, req.(*GetLiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetHotLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotLiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetHotLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetHotLiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetHotLiveList(ctx, req.(*GetHotLiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_JoinLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).JoinLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_JoinLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).JoinLiveRoom(ctx, req.(*JoinLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_LeaveLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).LeaveLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_LeaveLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).LeaveLiveRoom(ctx, req.(*LeaveLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveViewerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveViewerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveViewerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveViewerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveViewerList(ctx, req.(*GetLiveViewerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_SendLiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLiveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).SendLiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_SendLiveChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).SendLiveChat(ctx, req.(*SendLiveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveChatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveChatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveChatList(ctx, req.(*GetLiveChatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_SendLiveGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLiveGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).SendLiveGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_SendLiveGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).SendLiveGift(ctx, req.(*SendLiveGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveGiftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveGiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveGiftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveGiftList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveGiftList(ctx, req.(*GetLiveGiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_LikeLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).LikeLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_LikeLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).LikeLive(ctx, req.(*LikeLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_SearchLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).SearchLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_SearchLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).SearchLive(ctx, req.(*SearchLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveCategories(ctx, req.(*GetLiveCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLiveStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLiveStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLiveStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLiveStats(ctx, req.(*GetLiveStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_GetLivePlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivePlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).GetLivePlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_GetLivePlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).GetLivePlayback(ctx, req.(*GetLivePlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveService_ServiceDesc is the grpc.ServiceDesc for LiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "livepb.LiveService",
	HandlerType: (*LiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartLive",
			Handler:    _LiveService_StartLive_Handler,
		},
		{
			MethodName: "StopLive",
			Handler:    _LiveService_StopLive_Handler,
		},
		{
			MethodName: "GetLiveStream",
			Handler:    _LiveService_GetLiveStream_Handler,
		},
		{
			MethodName: "GetLiveList",
			Handler:    _LiveService_GetLiveList_Handler,
		},
		{
			MethodName: "GetHotLiveList",
			Handler:    _LiveService_GetHotLiveList_Handler,
		},
		{
			MethodName: "JoinLiveRoom",
			Handler:    _LiveService_JoinLiveRoom_Handler,
		},
		{
			MethodName: "LeaveLiveRoom",
			Handler:    _LiveService_LeaveLiveRoom_Handler,
		},
		{
			MethodName: "GetLiveViewerList",
			Handler:    _LiveService_GetLiveViewerList_Handler,
		},
		{
			MethodName: "SendLiveChat",
			Handler:    _LiveService_SendLiveChat_Handler,
		},
		{
			MethodName: "GetLiveChatList",
			Handler:    _LiveService_GetLiveChatList_Handler,
		},
		{
			MethodName: "SendLiveGift",
			Handler:    _LiveService_SendLiveGift_Handler,
		},
		{
			MethodName: "GetLiveGiftList",
			Handler:    _LiveService_GetLiveGiftList_Handler,
		},
		{
			MethodName: "LikeLive",
			Handler:    _LiveService_LikeLive_Handler,
		},
		{
			MethodName: "SearchLive",
			Handler:    _LiveService_SearchLive_Handler,
		},
		{
			MethodName: "GetLiveCategories",
			Handler:    _LiveService_GetLiveCategories_Handler,
		},
		{
			MethodName: "GetLiveStats",
			Handler:    _LiveService_GetLiveStats_Handler,
		},
		{
			MethodName: "GetLivePlayback",
			Handler:    _LiveService_GetLivePlayback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/live.proto",
}
