// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: idl/video.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_PublishVideo_FullMethodName       = "/rpc.video.VideoService/PublishVideo"
	VideoService_DeleteVideo_FullMethodName        = "/rpc.video.VideoService/DeleteVideo"
	VideoService_GetVideoInfo_FullMethodName       = "/rpc.video.VideoService/GetVideoInfo"
	VideoService_GetVideoInfos_FullMethodName      = "/rpc.video.VideoService/GetVideoInfos"
	VideoService_GetUserVideos_FullMethodName      = "/rpc.video.VideoService/GetUserVideos"
	VideoService_GetRecommendVideos_FullMethodName = "/rpc.video.VideoService/GetRecommendVideos"
	VideoService_GetFollowVideos_FullMethodName    = "/rpc.video.VideoService/GetFollowVideos"
	VideoService_LikeVideo_FullMethodName          = "/rpc.video.VideoService/LikeVideo"
	VideoService_GetUserLikedVideos_FullMethodName = "/rpc.video.VideoService/GetUserLikedVideos"
	VideoService_ShareVideo_FullMethodName         = "/rpc.video.VideoService/ShareVideo"
	VideoService_CommentVideo_FullMethodName       = "/rpc.video.VideoService/CommentVideo"
	VideoService_DeleteComment_FullMethodName      = "/rpc.video.VideoService/DeleteComment"
	VideoService_GetVideoComments_FullMethodName   = "/rpc.video.VideoService/GetVideoComments"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	// 视频发布相关
	PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
	// 视频信息获取
	GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*VideoResponse, error)
	GetVideoInfos(ctx context.Context, in *GetVideoInfosRequest, opts ...grpc.CallOption) (*GetVideoInfosResponse, error)
	// 视频列表相关
	GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*GetUserVideosResponse, error)
	GetRecommendVideos(ctx context.Context, in *GetRecommendVideosRequest, opts ...grpc.CallOption) (*GetRecommendVideosResponse, error)
	GetFollowVideos(ctx context.Context, in *GetFollowVideosRequest, opts ...grpc.CallOption) (*GetFollowVideosResponse, error)
	// 视频互动相关
	LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error)
	GetUserLikedVideos(ctx context.Context, in *GetUserLikedVideosRequest, opts ...grpc.CallOption) (*GetUserLikedVideosResponse, error)
	ShareVideo(ctx context.Context, in *ShareVideoRequest, opts ...grpc.CallOption) (*ShareVideoResponse, error)
	// 视频评论相关
	CommentVideo(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	GetVideoComments(ctx context.Context, in *GetVideoCommentsRequest, opts ...grpc.CallOption) (*GetVideoCommentsResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_PublishVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoInfos(ctx context.Context, in *GetVideoInfosRequest, opts ...grpc.CallOption) (*GetVideoInfosResponse, error) {
	out := new(GetVideoInfosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*GetUserVideosResponse, error) {
	out := new(GetUserVideosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUserVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetRecommendVideos(ctx context.Context, in *GetRecommendVideosRequest, opts ...grpc.CallOption) (*GetRecommendVideosResponse, error) {
	out := new(GetRecommendVideosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetRecommendVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetFollowVideos(ctx context.Context, in *GetFollowVideosRequest, opts ...grpc.CallOption) (*GetFollowVideosResponse, error) {
	out := new(GetFollowVideosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetFollowVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error) {
	out := new(LikeVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_LikeVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetUserLikedVideos(ctx context.Context, in *GetUserLikedVideosRequest, opts ...grpc.CallOption) (*GetUserLikedVideosResponse, error) {
	out := new(GetUserLikedVideosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUserLikedVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) ShareVideo(ctx context.Context, in *ShareVideoRequest, opts ...grpc.CallOption) (*ShareVideoResponse, error) {
	out := new(ShareVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_ShareVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) CommentVideo(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, VideoService_CommentVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, VideoService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoComments(ctx context.Context, in *GetVideoCommentsRequest, opts ...grpc.CallOption) (*GetVideoCommentsResponse, error) {
	out := new(GetVideoCommentsResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	// 视频发布相关
	PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error)
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	// 视频信息获取
	GetVideoInfo(context.Context, *GetVideoInfoRequest) (*VideoResponse, error)
	GetVideoInfos(context.Context, *GetVideoInfosRequest) (*GetVideoInfosResponse, error)
	// 视频列表相关
	GetUserVideos(context.Context, *GetUserVideosRequest) (*GetUserVideosResponse, error)
	GetRecommendVideos(context.Context, *GetRecommendVideosRequest) (*GetRecommendVideosResponse, error)
	GetFollowVideos(context.Context, *GetFollowVideosRequest) (*GetFollowVideosResponse, error)
	// 视频互动相关
	LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error)
	GetUserLikedVideos(context.Context, *GetUserLikedVideosRequest) (*GetUserLikedVideosResponse, error)
	ShareVideo(context.Context, *ShareVideoRequest) (*ShareVideoResponse, error)
	// 视频评论相关
	CommentVideo(context.Context, *CommentRequest) (*CommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	GetVideoComments(context.Context, *GetVideoCommentsRequest) (*GetVideoCommentsResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoInfo(context.Context, *GetVideoInfoRequest) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoInfos(context.Context, *GetVideoInfosRequest) (*GetVideoInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfos not implemented")
}
func (UnimplementedVideoServiceServer) GetUserVideos(context.Context, *GetUserVideosRequest) (*GetUserVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideos not implemented")
}
func (UnimplementedVideoServiceServer) GetRecommendVideos(context.Context, *GetRecommendVideosRequest) (*GetRecommendVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendVideos not implemented")
}
func (UnimplementedVideoServiceServer) GetFollowVideos(context.Context, *GetFollowVideosRequest) (*GetFollowVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowVideos not implemented")
}
func (UnimplementedVideoServiceServer) LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetUserLikedVideos(context.Context, *GetUserLikedVideosRequest) (*GetUserLikedVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikedVideos not implemented")
}
func (UnimplementedVideoServiceServer) ShareVideo(context.Context, *ShareVideoRequest) (*ShareVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareVideo not implemented")
}
func (UnimplementedVideoServiceServer) CommentVideo(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentVideo not implemented")
}
func (UnimplementedVideoServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoComments(context.Context, *GetVideoCommentsRequest) (*GetVideoCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoComments not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVideo(ctx, req.(*PublishVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideo(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, req.(*GetVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoInfos(ctx, req.(*GetVideoInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetUserVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUserVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUserVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUserVideos(ctx, req.(*GetUserVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetRecommendVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetRecommendVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetRecommendVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetRecommendVideos(ctx, req.(*GetRecommendVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetFollowVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetFollowVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetFollowVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetFollowVideos(ctx, req.(*GetFollowVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_LikeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).LikeVideo(ctx, req.(*LikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetUserLikedVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLikedVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUserLikedVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUserLikedVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUserLikedVideos(ctx, req.(*GetUserLikedVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_ShareVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).ShareVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_ShareVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).ShareVideo(ctx, req.(*ShareVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_CommentVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).CommentVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_CommentVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).CommentVideo(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoComments(ctx, req.(*GetVideoCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishVideo",
			Handler:    _VideoService_PublishVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoService_DeleteVideo_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoService_GetVideoInfo_Handler,
		},
		{
			MethodName: "GetVideoInfos",
			Handler:    _VideoService_GetVideoInfos_Handler,
		},
		{
			MethodName: "GetUserVideos",
			Handler:    _VideoService_GetUserVideos_Handler,
		},
		{
			MethodName: "GetRecommendVideos",
			Handler:    _VideoService_GetRecommendVideos_Handler,
		},
		{
			MethodName: "GetFollowVideos",
			Handler:    _VideoService_GetFollowVideos_Handler,
		},
		{
			MethodName: "LikeVideo",
			Handler:    _VideoService_LikeVideo_Handler,
		},
		{
			MethodName: "GetUserLikedVideos",
			Handler:    _VideoService_GetUserLikedVideos_Handler,
		},
		{
			MethodName: "ShareVideo",
			Handler:    _VideoService_ShareVideo_Handler,
		},
		{
			MethodName: "CommentVideo",
			Handler:    _VideoService_CommentVideo_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _VideoService_DeleteComment_Handler,
		},
		{
			MethodName: "GetVideoComments",
			Handler:    _VideoService_GetVideoComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/video.proto",
}
